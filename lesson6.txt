import java.util.Scanner;
import java.util.*;
import java.io.*;

public class LessonSix {
    static Scanner userInput = new Scanner(System.in);
   
    public static void main(String[] args){
        divideByZero(2);
        System.out.print("How old are you? ");
        int age = checkValidAge();
        if (age != 0){
        System.out.println("You are " + age + " years old");
        }
        getAFile("./somestuff.txt");
    }

    public static void divideByZero(int a)
    {
        try
        {
            // The following throws an error because you can't divide by zero
            // Exception in thread "main" java.lang.ArithmeticException
            System.out.println(a/0);
        }
        // If the exception ArithmeticException is thrown the following execute
        catch (ArithmeticException e)
        {
            // Your custom error message
            System.out.println("You can't divide by zero");
            // Java's error message for this exception
            System.out.println(e.getMessage());
            // Prints the exception name and error message
            System.out.println(e.toString());
            // Prints the standard error stack trace
            e.printStackTrace();
        }
    }
    public static int checkValidAge()
    {
        try
        {
            return userInput.nextInt(); // nextInt() receives the user input
        }
        catch (InputMismatchException e)
        {
            userInput.next(); // Skips the last user input and waits for the next
            System.out.print("That isn't a whole number");
            return 0;
        }
    }
     public static void getAFile(String fileName) throws IOException, FileNotFoundException
      {
           FileInputStream file = new FileInputStream(fileName);
      }
      public static void main(String[] args) {
      try 
      {
          getAFile("./somestuff.txt");
      }
      catch(IOException e) 
      {
          System.out.println("An unknown IO Error Occured");
      }
    public static void getAFile(String fileName)
    {
        try
        {
        FileInputStream file = new FileInputStream(fileName);
        }
        catch (FileNotFoundException e)
        {
            System.out.println("Sorry I couldn't find that file");
        }
        catch (IOException e) // Catches any IO Exception
        {
            System.out.println("An unknown IO Error Occured");
        }
        // This will catch any exception (This should always be last)
        catch (Exception e)
        {
            System.out.println("I catch every exception");
        }
        // If used finally is always executed whether there was an exception or not
        // It is used for clean up work like closing files and database connections
        finally
        {
            System.out.println("");
        }
         
    }
     
}
